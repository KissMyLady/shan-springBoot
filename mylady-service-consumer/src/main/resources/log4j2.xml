<?xml version="1.0" encoding="UTF-8"?>
<!--参考设置: https://www.cnblogs.com/keeya/p/10101547.html-->
<configuration>
    <!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
    <properties>
        <!-- %logger{36} 表示 Logger 名字最长36个字符 -->
        <property name="LOG_PATTERN" value="%date{HH:mm:ss.SSS}|%-5level| %logger{36} |%L row: %msg%n" />
        <property name="default" value="%d{DEFAULT}|%-4sn|%-5level|M: %M: %l|%L row: %msg%n"/>
        <!-- 定义日志存储的路径 -->
        <property name="FILE_PATH" value="H:/myPprogramming/javaCode/shan_springBoot/logs" />
        <!--
         格式化输出：%date表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %msg：日志消息，%n是换行符
                %d{yyyy-MM-dd HH:mm:ss, SSS} : 日志生产时间,输出到毫秒的时间
                %-5level : 输出日志级别，-5表示左对齐并且固定输出5个字符，如果不足在右边补0
                %c : logger的名称(%logger)
                %t : 输出当前线程名称
                %p : 日志输出格式
                %m : 日志内容，即 logger.info("message")
                %n : 换行符
                %C : Java类名(%F)
                %L : 行号
                %M : 方法名
                %l : 输出语句所在的行数, 包括类名、方法名、文件名、行数
                hostName : 本地机器名
                hostAddress : 本地ip地址
        -->
        <!--2021-07-11 01:47:47,342^|18^|INFO^|main^|org.apache.coyote.http11.Http11NioProtocol^|log^|Starting ProtocolHandler ["http-nio-8000"]-->
        <property name="CONSOLE_PATTERN">%d{DEFAULT}|%-4sn|%-5level|M: %M|%msg%n</property>
        <property name="FILE_NAME">${log.fileName}</property>
    </properties>
    
    <!--先定义所有的appender-->
    <appenders>
    
        <!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，适合临时测试用-->
        <File name="Filelog" fileName="${FILE_PATH}/test.log" append="false">
            <PatternLayout pattern="${default}"/>
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
        </File>
        
        <!--这个输出控制台的配置-->
        <console name="Console" target="SYSTEM_OUT">
            <PatternLayout pattern="${default}"/> <!--输出日志的格式 -->
            <!--控制台只输出level及其以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
        </console>
        
        <!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingFile name="RollingFileInfo" fileName="${FILE_PATH}/info.log"
                     filePattern="${FILE_PATH}/${FILE_NAME}-INFO-%d{yyyy-MM-dd}_%i.log">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${default}"/>
            <Policies>
                <!--interval属性用来指定多久滚动一次，默认是1 hour-->
                <TimeBasedTriggeringPolicy interval="1"/>
                <SizeBasedTriggeringPolicy size="10MB"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖-->
            <DefaultRolloverStrategy max="15"/>
        </RollingFile>
    
        <!-- 这个会打印出所有的warn及以下级别的信息-->
        <RollingFile name="RollingFileWarn" fileName="${FILE_PATH}/warn.log"
                     filePattern="${FILE_PATH}/${FILE_NAME}-WARN-%d{yyyy-MM-dd}_%i.log">
            <ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${LOG_PATTERN}"/>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1"/>
                <SizeBasedTriggeringPolicy size="10MB"/>
            </Policies>
            <DefaultRolloverStrategy max="10"/>
        </RollingFile>
    
        <!-- 这个会打印出所有的error及以下级别的信息-->
        <RollingFile name="RollingFileError" fileName="${FILE_PATH}/error.log"
                     filePattern="${FILE_PATH}/${FILE_NAME}-ERROR-%d{yyyy-MM-dd}_%i.log">
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${LOG_PATTERN}"/>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1"/>
                <SizeBasedTriggeringPolicy size="10MB"/>
            </Policies>
            <DefaultRolloverStrategy max="10"/>
        </RollingFile>
        
    </appenders>
    
    
    <!--Logger节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。-->
    <!--然后定义loggers，只有定义了logger并引入的appender，appender才会生效-->
    <loggers>
    
        <logger name="org.mybatis" level="warn" additivity="false">
            <AppenderRef ref="RollingFileWarn"/>
        </logger>
    
        <logger name="com.zaxxer.hikari.pool.HikariPool" level="WARN" additivity="false">
            <AppenderRef ref="RollingFileWarn"/>
        </logger>
        
        <logger name="com.zaxxer" level="WARN" additivity="false">
            <AppenderRef ref="RollingFileWarn"/>
        </logger>
        
        <Logger name="org.springframework" level="WARN" additivity="false">
            <AppenderRef ref="RollingFileWarn"/>
        </Logger>
    
        <Logger name="org.apache.http" level="WARN" additivity="false">
            <AppenderRef ref="RollingFileWarn"/>
        </Logger>
    
        <Logger name="com.netflix.discovery" level="WARN" additivity="false">
            <AppenderRef ref="RollingFileWarn"/>
        </Logger>
        
        <Logger name="org.hibernate" level="WARN" additivity="false">
            <AppenderRef ref="RollingFileWarn"/>
        </Logger>
    
    
        <root level="info">
            <appender-ref ref="Console"/>
            <appender-ref ref="Filelog"/>
            <appender-ref ref="RollingFileInfo"/>
            <appender-ref ref="RollingFileWarn"/>
            <appender-ref ref="RollingFileError"/>
        </root>
        
    </loggers>
    
    
</configuration>